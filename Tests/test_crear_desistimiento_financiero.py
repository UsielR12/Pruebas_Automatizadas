# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support import expected_conditions as EC



class TestTestcreardesistimientofinanciero():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.driver.maximize_window()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()


  def test_testcreardesistimientofinanciero(self):
    # Test name: test_crear_desistimiento_financiero
    # Step # | name | target | value
    # 1 | open | http://concasa-financial-advisor.s3-website-us-east-1.amazonaws.com/login |
    self.driver.get("http://concasa-financial-advisor.s3-website-us-east-1.amazonaws.com/login")
    # 2 | setWindowSize | fullsize |
    self.driver.maximize_window()
    # 3 | click | name=emaiI |
    WebDriverWait(self.driver, 60).until(EC.visibility_of_element_located((By.NAME, "emaiI")))
    WebDriverWait(self.driver, 60).until(EC.element_to_be_clickable((By.NAME, "emaiI")))
    self.driver.find_element(By.NAME, "emaiI").click()
    # 4 | type | name=emaiI | usiel.ramirez@concasa.com
    self.driver.find_element(By.NAME, "emaiI").send_keys("asesor.financiero.concasa@yopmail.com")
    # 5 | click | name=passI | 
    self.driver.find_element(By.NAME, "passI").click()
    # 6 | type | name=passI | 123456
    self.driver.find_element(By.NAME, "passI").send_keys("123456")
    # 7 | click | css=.textPassword > .beginning-button | 
    self.driver.find_element(By.CSS_SELECTOR, ".textPassword > .beginning-button").click()
    # 8 | click | css=.card-body:nth-child(1) |
    WebDriverWait(self.driver, 60).until(EC.visibility_of_element_located((By.CSS_SELECTOR, ".card-body:nth-child(1)")))
    WebDriverWait(self.driver, 60).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".card-body:nth-child(1)")))
    element = self.driver.find_element(By.CSS_SELECTOR, ".card-body:nth-child(1)")
    self.driver.execute_script("arguments[0].click();", element)





    # 11 | click | linkText=24 |Aquí se selecciona el expediente en el que se crea el desistimiento
    WebDriverWait(self.driver, 60).until(EC.visibility_of_element_located((By.LINK_TEXT, "9911")))
    WebDriverWait(self.driver, 60).until(EC.element_to_be_clickable((By.LINK_TEXT, "9911")))
    element = self.driver.find_element(By.LINK_TEXT, "9911")
    self.driver.execute_script("arguments[0].click();", element)
    # 12 | mouseOver | linkText=Información |
    WebDriverWait(self.driver, 60).until(EC.visibility_of_element_located((By.LINK_TEXT, "Información")))
    WebDriverWait(self.driver, 60).until(EC.element_to_be_clickable((By.LINK_TEXT, "Información")))
    element2 = self.driver.find_element(By.LINK_TEXT, "Información")
    actions = ActionChains(self.driver)
    actions.move_to_element(element2).perform()
    # 13 | mouseOut | linkText=Información |
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()


    # 14 | click | .button-desist |
    element1 = self.driver.find_element(By.CSS_SELECTOR, ".button-desist")
    self.driver.execute_script("arguments[0].click();", element1)

    # 15 | click | css=.modal-section-container #dModal-Toggle |
    element = self.driver.find_element(By.CSS_SELECTOR, ".modal-section-container #dModal-Toggle")
    self.driver.execute_script("arguments[0].click();", element)
    #self.driver.find_element(By.CSS_SELECTOR, ".modal-section-container #dModal-Toggle").click()
    # 16 | click | linkText=Capacidad de pago insuficiente |
    element = self.driver.find_element(By.LINK_TEXT, "Capacidad de pago insuficiente")
    self.driver.execute_script("arguments[0].click();", element)
    # 18 | type | css=.picker-input_modal input | 3/25/2024
    self.driver.find_element(By.CSS_SELECTOR, ".picker-input_modal input").send_keys("3/25/2024")
    # 19 | click | css=.right-column > .left-paid-modal-column |
    # 20 | click | css=.text-input-modal-money |
    element = self.driver.find_element(By.CSS_SELECTOR, ".text-input-modal-money")
    self.driver.execute_script("arguments[0].click();", element)
    # 21 | type | css=.text-input-modal-money | 00
    self.driver.find_element(By.CSS_SELECTOR, ".text-input-modal-money").send_keys("00")
    # 22 | click | css=.modal-section-container .observationText |
    element = self.driver.find_element(By.CSS_SELECTOR, ".modal-section-container .observationText")
    self.driver.execute_script("arguments[0].click();", element)
    # 23 | type | css=.modal-section-container .observationText | No hay pago suficiente\n
    self.driver.find_element(By.CSS_SELECTOR, ".modal-section-container .observationText").send_keys("No hay pago suficiente")
    # 24 | click | css=.modal-content |
    element = self.driver.find_element(By.CSS_SELECTOR, ".modal-content")
    self.driver.execute_script("arguments[0].click();", element)
    # 25 | click | css=.large-modal-standard-button |
    element = self.driver.find_element(By.CSS_SELECTOR, ".large-modal-standard-button")
    self.driver.execute_script("arguments[0].click();", element)


    #Se crea el desistimiento
    element = self.driver.find_element(By.CSS_SELECTOR, ".accept-button")
    self.driver.execute_script("arguments[0].click();", element)

    WebDriverWait(self.driver, 60).until(EC.visibility_of_element_located((By.CSS_SELECTOR, ".swal2-confirm")))
    WebDriverWait(self.driver, 60).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".swal2-confirm")))
    element = self.driver.find_element(By.CSS_SELECTOR, ".swal2-confirm")
    self.driver.execute_script("arguments[0].click();", element)

    time.sleep(4)

